/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface RegistrationSignatureInterface extends utils.Interface {
  functions: {
    "getDeadline()": FunctionFragment;
    "getDeadline(address)": FunctionFragment;
    "getTrustedForwarder(address)": FunctionFragment;
    "getTrustedForwarderAddress()": FunctionFragment;
    "nonces(address)": FunctionFragment;
    "walletRegistration(address,uint256,uint8,bytes32,bytes32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getDeadline()"
      | "getDeadline(address)"
      | "getTrustedForwarder"
      | "getTrustedForwarderAddress"
      | "nonces"
      | "walletRegistration"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getDeadline()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDeadline(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTrustedForwarder",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTrustedForwarderAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nonces",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "walletRegistration",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "getDeadline()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDeadline(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTrustedForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTrustedForwarderAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "walletRegistration",
    data: BytesLike
  ): Result;

  events: {
    "RegistrationEvent(address)": EventFragment;
    "SponsoredReigistrationEvent(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "RegistrationEvent"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SponsoredReigistrationEvent"
  ): EventFragment;
}

export interface RegistrationEventEventObject {
  owner: string;
}
export type RegistrationEventEvent = TypedEvent<
  [string],
  RegistrationEventEventObject
>;

export type RegistrationEventEventFilter =
  TypedEventFilter<RegistrationEventEvent>;

export interface SponsoredReigistrationEventEventObject {
  owner: string;
}
export type SponsoredReigistrationEventEvent = TypedEvent<
  [string],
  SponsoredReigistrationEventEventObject
>;

export type SponsoredReigistrationEventEventFilter =
  TypedEventFilter<SponsoredReigistrationEventEvent>;

export interface RegistrationSignature extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RegistrationSignatureInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    "getDeadline()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getDeadline(address)"(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTrustedForwarder(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getTrustedForwarderAddress(overrides?: CallOverrides): Promise<[string]>;

    nonces(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    walletRegistration(
      owner: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  "getDeadline()"(overrides?: CallOverrides): Promise<BigNumber>;

  "getDeadline(address)"(
    owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTrustedForwarder(
    owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getTrustedForwarderAddress(overrides?: CallOverrides): Promise<string>;

  nonces(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  walletRegistration(
    owner: PromiseOrValue<string>,
    deadline: PromiseOrValue<BigNumberish>,
    v: PromiseOrValue<BigNumberish>,
    r: PromiseOrValue<BytesLike>,
    s: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    "getDeadline()"(overrides?: CallOverrides): Promise<BigNumber>;

    "getDeadline(address)"(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTrustedForwarder(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getTrustedForwarderAddress(overrides?: CallOverrides): Promise<string>;

    nonces(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    walletRegistration(
      owner: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "RegistrationEvent(address)"(
      owner?: PromiseOrValue<string> | null
    ): RegistrationEventEventFilter;
    RegistrationEvent(
      owner?: PromiseOrValue<string> | null
    ): RegistrationEventEventFilter;

    "SponsoredReigistrationEvent(address)"(
      owner?: PromiseOrValue<string> | null
    ): SponsoredReigistrationEventEventFilter;
    SponsoredReigistrationEvent(
      owner?: PromiseOrValue<string> | null
    ): SponsoredReigistrationEventEventFilter;
  };

  estimateGas: {
    "getDeadline()"(overrides?: CallOverrides): Promise<BigNumber>;

    "getDeadline(address)"(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTrustedForwarder(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTrustedForwarderAddress(overrides?: CallOverrides): Promise<BigNumber>;

    nonces(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    walletRegistration(
      owner: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    "getDeadline()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getDeadline(address)"(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTrustedForwarder(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTrustedForwarderAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nonces(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    walletRegistration(
      owner: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
