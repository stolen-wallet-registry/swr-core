/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface TargetRegistryInterface extends utils.Interface {
  functions: {
    "executor()": FunctionFragment;
    "myWalletWasStolen(address)": FunctionFragment;
    "originContract()": FunctionFragment;
    "originDomain()": FunctionFragment;
    "publicGoodsRegistrationFee()": FunctionFragment;
    "stolenWalletRegistry()": FunctionFragment;
    "value()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "executor"
      | "myWalletWasStolen"
      | "originContract"
      | "originDomain"
      | "publicGoodsRegistrationFee"
      | "stolenWalletRegistry"
      | "value"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "executor", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "myWalletWasStolen",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "originContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "originDomain",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "publicGoodsRegistrationFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stolenWalletRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "value", values?: undefined): string;

  decodeFunctionResult(functionFragment: "executor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "myWalletWasStolen",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "originContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "originDomain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "publicGoodsRegistrationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stolenWalletRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "value", data: BytesLike): Result;

  events: {
    "UpdateCompleted(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "UpdateCompleted"): EventFragment;
}

export interface UpdateCompletedEventObject {
  sender: string;
  wallet: string;
}
export type UpdateCompletedEvent = TypedEvent<
  [string, string],
  UpdateCompletedEventObject
>;

export type UpdateCompletedEventFilter = TypedEventFilter<UpdateCompletedEvent>;

export interface TargetRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TargetRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    executor(overrides?: CallOverrides): Promise<[string]>;

    myWalletWasStolen(
      wallet: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    originContract(overrides?: CallOverrides): Promise<[string]>;

    originDomain(overrides?: CallOverrides): Promise<[number]>;

    publicGoodsRegistrationFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    stolenWalletRegistry(overrides?: CallOverrides): Promise<[string]>;

    value(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  executor(overrides?: CallOverrides): Promise<string>;

  myWalletWasStolen(
    wallet: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  originContract(overrides?: CallOverrides): Promise<string>;

  originDomain(overrides?: CallOverrides): Promise<number>;

  publicGoodsRegistrationFee(overrides?: CallOverrides): Promise<BigNumber>;

  stolenWalletRegistry(overrides?: CallOverrides): Promise<string>;

  value(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    executor(overrides?: CallOverrides): Promise<string>;

    myWalletWasStolen(
      wallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    originContract(overrides?: CallOverrides): Promise<string>;

    originDomain(overrides?: CallOverrides): Promise<number>;

    publicGoodsRegistrationFee(overrides?: CallOverrides): Promise<BigNumber>;

    stolenWalletRegistry(overrides?: CallOverrides): Promise<string>;

    value(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "UpdateCompleted(address,address)"(
      sender?: null,
      wallet?: null
    ): UpdateCompletedEventFilter;
    UpdateCompleted(sender?: null, wallet?: null): UpdateCompletedEventFilter;
  };

  estimateGas: {
    executor(overrides?: CallOverrides): Promise<BigNumber>;

    myWalletWasStolen(
      wallet: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    originContract(overrides?: CallOverrides): Promise<BigNumber>;

    originDomain(overrides?: CallOverrides): Promise<BigNumber>;

    publicGoodsRegistrationFee(overrides?: CallOverrides): Promise<BigNumber>;

    stolenWalletRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    value(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    executor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    myWalletWasStolen(
      wallet: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    originContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    originDomain(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    publicGoodsRegistrationFee(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stolenWalletRegistry(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    value(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
