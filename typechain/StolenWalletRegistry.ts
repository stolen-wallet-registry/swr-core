/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface StolenWalletRegistryInterface extends utils.Interface {
  functions: {
    "DEADLINE_BLOCKS()": FunctionFragment;
    "DEADLINE_MINUTES()": FunctionFragment;
    "START_TIME_BLOCKS()": FunctionFragment;
    "START_TIME_MINUTES()": FunctionFragment;
    "acknowledgementOfRegistry(uint256,uint256,address,uint8,bytes32,bytes32)": FunctionFragment;
    "generateHashStruct(address)": FunctionFragment;
    "getDeadline()": FunctionFragment;
    "getDeadline(address)": FunctionFragment;
    "getDeadlines(address)": FunctionFragment;
    "getStartTime(address)": FunctionFragment;
    "getStartTime()": FunctionFragment;
    "getTrustedForwarder()": FunctionFragment;
    "gracePeriodLeft()": FunctionFragment;
    "isWalletRegistered(address)": FunctionFragment;
    "isWalletRegistered()": FunctionFragment;
    "myWalletWasStolen()": FunctionFragment;
    "nonces(address)": FunctionFragment;
    "publicGoodsRegistrationFee()": FunctionFragment;
    "registeredWalletCount()": FunctionFragment;
    "registeredWallets(address)": FunctionFragment;
    "regististrationPeriodExpired()": FunctionFragment;
    "registrationPeriodLeft()": FunctionFragment;
    "walletRegistration(uint256,uint256,address,uint8,bytes32,bytes32)": FunctionFragment;
    "whenWalletWasRegisted(address)": FunctionFragment;
    "whenWalletWasRegisted()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DEADLINE_BLOCKS"
      | "DEADLINE_MINUTES"
      | "START_TIME_BLOCKS"
      | "START_TIME_MINUTES"
      | "acknowledgementOfRegistry"
      | "generateHashStruct"
      | "getDeadline()"
      | "getDeadline(address)"
      | "getDeadlines"
      | "getStartTime(address)"
      | "getStartTime()"
      | "getTrustedForwarder"
      | "gracePeriodLeft"
      | "isWalletRegistered(address)"
      | "isWalletRegistered()"
      | "myWalletWasStolen"
      | "nonces"
      | "publicGoodsRegistrationFee"
      | "registeredWalletCount"
      | "registeredWallets"
      | "regististrationPeriodExpired"
      | "registrationPeriodLeft"
      | "walletRegistration"
      | "whenWalletWasRegisted(address)"
      | "whenWalletWasRegisted()"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DEADLINE_BLOCKS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEADLINE_MINUTES",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "START_TIME_BLOCKS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "START_TIME_MINUTES",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acknowledgementOfRegistry",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "generateHashStruct",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDeadline()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDeadline(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDeadlines",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getStartTime(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getStartTime()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTrustedForwarder",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "gracePeriodLeft",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isWalletRegistered(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isWalletRegistered()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "myWalletWasStolen",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nonces",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "publicGoodsRegistrationFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registeredWalletCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registeredWallets",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "regististrationPeriodExpired",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registrationPeriodLeft",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "walletRegistration",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "whenWalletWasRegisted(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "whenWalletWasRegisted()",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "DEADLINE_BLOCKS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEADLINE_MINUTES",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "START_TIME_BLOCKS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "START_TIME_MINUTES",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acknowledgementOfRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "generateHashStruct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDeadline()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDeadline(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDeadlines",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStartTime(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStartTime()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTrustedForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gracePeriodLeft",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWalletRegistered(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWalletRegistered()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "myWalletWasStolen",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "publicGoodsRegistrationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registeredWalletCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registeredWallets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "regististrationPeriodExpired",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registrationPeriodLeft",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "walletRegistration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whenWalletWasRegisted(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whenWalletWasRegisted()",
    data: BytesLike
  ): Result;

  events: {
    "AcknowledgementEvent(address,bool)": EventFragment;
    "MsgValue(uint256,uint256,uint256)": EventFragment;
    "RegisteredAddressEvent(address,bool)": EventFragment;
    "RegistrationEvent(address,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AcknowledgementEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MsgValue"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RegisteredAddressEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RegistrationEvent"): EventFragment;
}

export interface AcknowledgementEventEventObject {
  owner: string;
  isSponsored: boolean;
}
export type AcknowledgementEventEvent = TypedEvent<
  [string, boolean],
  AcknowledgementEventEventObject
>;

export type AcknowledgementEventEventFilter =
  TypedEventFilter<AcknowledgementEventEvent>;

export interface MsgValueEventObject {
  value1: BigNumber;
  value2: BigNumber;
  cost: BigNumber;
}
export type MsgValueEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  MsgValueEventObject
>;

export type MsgValueEventFilter = TypedEventFilter<MsgValueEvent>;

export interface RegisteredAddressEventEventObject {
  registeredWallet: string;
  gasless: boolean;
}
export type RegisteredAddressEventEvent = TypedEvent<
  [string, boolean],
  RegisteredAddressEventEventObject
>;

export type RegisteredAddressEventEventFilter =
  TypedEventFilter<RegisteredAddressEventEvent>;

export interface RegistrationEventEventObject {
  owner: string;
  isSponsored: boolean;
}
export type RegistrationEventEvent = TypedEvent<
  [string, boolean],
  RegistrationEventEventObject
>;

export type RegistrationEventEventFilter =
  TypedEventFilter<RegistrationEventEvent>;

export interface StolenWalletRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StolenWalletRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEADLINE_BLOCKS(overrides?: CallOverrides): Promise<[BigNumber]>;

    DEADLINE_MINUTES(overrides?: CallOverrides): Promise<[number]>;

    START_TIME_BLOCKS(overrides?: CallOverrides): Promise<[BigNumber]>;

    START_TIME_MINUTES(overrides?: CallOverrides): Promise<[number]>;

    acknowledgementOfRegistry(
      deadline: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      owner: PromiseOrValue<string>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    generateHashStruct(
      forwarder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string] & { deadline: BigNumber; hashStruct: string }
    >;

    "getDeadline()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getDeadline(address)"(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getDeadlines(
      session: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, boolean]
    >;

    "getStartTime(address)"(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getStartTime()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTrustedForwarder(overrides?: CallOverrides): Promise<[string]>;

    gracePeriodLeft(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _secondsLeft: BigNumber }>;

    "isWalletRegistered(address)"(
      wallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isWalletRegistered()"(overrides?: CallOverrides): Promise<[boolean]>;

    myWalletWasStolen(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    nonces(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    publicGoodsRegistrationFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    registeredWalletCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    registeredWallets(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    regististrationPeriodExpired(overrides?: CallOverrides): Promise<[boolean]>;

    registrationPeriodLeft(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _secondsLeft: BigNumber }>;

    walletRegistration(
      deadline: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      owner: PromiseOrValue<string>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "whenWalletWasRegisted(address)"(
      wallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "whenWalletWasRegisted()"(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  DEADLINE_BLOCKS(overrides?: CallOverrides): Promise<BigNumber>;

  DEADLINE_MINUTES(overrides?: CallOverrides): Promise<number>;

  START_TIME_BLOCKS(overrides?: CallOverrides): Promise<BigNumber>;

  START_TIME_MINUTES(overrides?: CallOverrides): Promise<number>;

  acknowledgementOfRegistry(
    deadline: PromiseOrValue<BigNumberish>,
    nonce: PromiseOrValue<BigNumberish>,
    owner: PromiseOrValue<string>,
    v: PromiseOrValue<BigNumberish>,
    r: PromiseOrValue<BytesLike>,
    s: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  generateHashStruct(
    forwarder: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, string] & { deadline: BigNumber; hashStruct: string }>;

  "getDeadline()"(overrides?: CallOverrides): Promise<BigNumber>;

  "getDeadline(address)"(
    owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getDeadlines(
    session: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, boolean]>;

  "getStartTime(address)"(
    owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getStartTime()"(overrides?: CallOverrides): Promise<BigNumber>;

  getTrustedForwarder(overrides?: CallOverrides): Promise<string>;

  gracePeriodLeft(overrides?: CallOverrides): Promise<BigNumber>;

  "isWalletRegistered(address)"(
    wallet: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isWalletRegistered()"(overrides?: CallOverrides): Promise<boolean>;

  myWalletWasStolen(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  nonces(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  publicGoodsRegistrationFee(overrides?: CallOverrides): Promise<BigNumber>;

  registeredWalletCount(overrides?: CallOverrides): Promise<BigNumber>;

  registeredWallets(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  regististrationPeriodExpired(overrides?: CallOverrides): Promise<boolean>;

  registrationPeriodLeft(overrides?: CallOverrides): Promise<BigNumber>;

  walletRegistration(
    deadline: PromiseOrValue<BigNumberish>,
    nonce: PromiseOrValue<BigNumberish>,
    owner: PromiseOrValue<string>,
    v: PromiseOrValue<BigNumberish>,
    r: PromiseOrValue<BytesLike>,
    s: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "whenWalletWasRegisted(address)"(
    wallet: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "whenWalletWasRegisted()"(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    DEADLINE_BLOCKS(overrides?: CallOverrides): Promise<BigNumber>;

    DEADLINE_MINUTES(overrides?: CallOverrides): Promise<number>;

    START_TIME_BLOCKS(overrides?: CallOverrides): Promise<BigNumber>;

    START_TIME_MINUTES(overrides?: CallOverrides): Promise<number>;

    acknowledgementOfRegistry(
      deadline: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      owner: PromiseOrValue<string>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    generateHashStruct(
      forwarder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string] & { deadline: BigNumber; hashStruct: string }
    >;

    "getDeadline()"(overrides?: CallOverrides): Promise<BigNumber>;

    "getDeadline(address)"(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDeadlines(
      session: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, boolean]
    >;

    "getStartTime(address)"(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getStartTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    getTrustedForwarder(overrides?: CallOverrides): Promise<string>;

    gracePeriodLeft(overrides?: CallOverrides): Promise<BigNumber>;

    "isWalletRegistered(address)"(
      wallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isWalletRegistered()"(overrides?: CallOverrides): Promise<boolean>;

    myWalletWasStolen(overrides?: CallOverrides): Promise<void>;

    nonces(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    publicGoodsRegistrationFee(overrides?: CallOverrides): Promise<BigNumber>;

    registeredWalletCount(overrides?: CallOverrides): Promise<BigNumber>;

    registeredWallets(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    regististrationPeriodExpired(overrides?: CallOverrides): Promise<boolean>;

    registrationPeriodLeft(overrides?: CallOverrides): Promise<BigNumber>;

    walletRegistration(
      deadline: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      owner: PromiseOrValue<string>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    "whenWalletWasRegisted(address)"(
      wallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "whenWalletWasRegisted()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "AcknowledgementEvent(address,bool)"(
      owner?: PromiseOrValue<string> | null,
      isSponsored?: PromiseOrValue<boolean> | null
    ): AcknowledgementEventEventFilter;
    AcknowledgementEvent(
      owner?: PromiseOrValue<string> | null,
      isSponsored?: PromiseOrValue<boolean> | null
    ): AcknowledgementEventEventFilter;

    "MsgValue(uint256,uint256,uint256)"(
      value1?: null,
      value2?: null,
      cost?: null
    ): MsgValueEventFilter;
    MsgValue(value1?: null, value2?: null, cost?: null): MsgValueEventFilter;

    "RegisteredAddressEvent(address,bool)"(
      registeredWallet?: null,
      gasless?: null
    ): RegisteredAddressEventEventFilter;
    RegisteredAddressEvent(
      registeredWallet?: null,
      gasless?: null
    ): RegisteredAddressEventEventFilter;

    "RegistrationEvent(address,bool)"(
      owner?: PromiseOrValue<string> | null,
      isSponsored?: PromiseOrValue<boolean> | null
    ): RegistrationEventEventFilter;
    RegistrationEvent(
      owner?: PromiseOrValue<string> | null,
      isSponsored?: PromiseOrValue<boolean> | null
    ): RegistrationEventEventFilter;
  };

  estimateGas: {
    DEADLINE_BLOCKS(overrides?: CallOverrides): Promise<BigNumber>;

    DEADLINE_MINUTES(overrides?: CallOverrides): Promise<BigNumber>;

    START_TIME_BLOCKS(overrides?: CallOverrides): Promise<BigNumber>;

    START_TIME_MINUTES(overrides?: CallOverrides): Promise<BigNumber>;

    acknowledgementOfRegistry(
      deadline: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      owner: PromiseOrValue<string>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    generateHashStruct(
      forwarder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getDeadline()"(overrides?: CallOverrides): Promise<BigNumber>;

    "getDeadline(address)"(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDeadlines(
      session: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getStartTime(address)"(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getStartTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    getTrustedForwarder(overrides?: CallOverrides): Promise<BigNumber>;

    gracePeriodLeft(overrides?: CallOverrides): Promise<BigNumber>;

    "isWalletRegistered(address)"(
      wallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isWalletRegistered()"(overrides?: CallOverrides): Promise<BigNumber>;

    myWalletWasStolen(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    nonces(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    publicGoodsRegistrationFee(overrides?: CallOverrides): Promise<BigNumber>;

    registeredWalletCount(overrides?: CallOverrides): Promise<BigNumber>;

    registeredWallets(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    regististrationPeriodExpired(overrides?: CallOverrides): Promise<BigNumber>;

    registrationPeriodLeft(overrides?: CallOverrides): Promise<BigNumber>;

    walletRegistration(
      deadline: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      owner: PromiseOrValue<string>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "whenWalletWasRegisted(address)"(
      wallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "whenWalletWasRegisted()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DEADLINE_BLOCKS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DEADLINE_MINUTES(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    START_TIME_BLOCKS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    START_TIME_MINUTES(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    acknowledgementOfRegistry(
      deadline: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      owner: PromiseOrValue<string>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    generateHashStruct(
      forwarder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getDeadline()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getDeadline(address)"(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDeadlines(
      session: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getStartTime(address)"(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getStartTime()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTrustedForwarder(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    gracePeriodLeft(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isWalletRegistered(address)"(
      wallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isWalletRegistered()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    myWalletWasStolen(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    nonces(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    publicGoodsRegistrationFee(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registeredWalletCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registeredWallets(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    regististrationPeriodExpired(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registrationPeriodLeft(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    walletRegistration(
      deadline: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      owner: PromiseOrValue<string>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "whenWalletWasRegisted(address)"(
      wallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "whenWalletWasRegisted()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
