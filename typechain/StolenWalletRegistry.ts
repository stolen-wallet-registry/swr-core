/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface StolenWalletRegistryInterface extends utils.Interface {
  functions: {
    "isWalletRegistered(address)": FunctionFragment;
    "myWalletWasStolen()": FunctionFragment;
    "publicGoodsRegistrationFee()": FunctionFragment;
    "registeredWalletCount()": FunctionFragment;
    "registeredWallets(address)": FunctionFragment;
    "whenWalletWasRegisted(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "isWalletRegistered"
      | "myWalletWasStolen"
      | "publicGoodsRegistrationFee"
      | "registeredWalletCount"
      | "registeredWallets"
      | "whenWalletWasRegisted"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "isWalletRegistered",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "myWalletWasStolen",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "publicGoodsRegistrationFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registeredWalletCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registeredWallets",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "whenWalletWasRegisted",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "isWalletRegistered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "myWalletWasStolen",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "publicGoodsRegistrationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registeredWalletCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registeredWallets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whenWalletWasRegisted",
    data: BytesLike
  ): Result;

  events: {
    "RegisteredAddressEvent(address,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "RegisteredAddressEvent"): EventFragment;
}

export interface RegisteredAddressEventEventObject {
  registeredWallet: string;
  gasless: boolean;
}
export type RegisteredAddressEventEvent = TypedEvent<
  [string, boolean],
  RegisteredAddressEventEventObject
>;

export type RegisteredAddressEventEventFilter =
  TypedEventFilter<RegisteredAddressEventEvent>;

export interface StolenWalletRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StolenWalletRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    isWalletRegistered(
      wallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    myWalletWasStolen(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    publicGoodsRegistrationFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    registeredWalletCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    registeredWallets(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    whenWalletWasRegisted(
      wallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  isWalletRegistered(
    wallet: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  myWalletWasStolen(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  publicGoodsRegistrationFee(overrides?: CallOverrides): Promise<BigNumber>;

  registeredWalletCount(overrides?: CallOverrides): Promise<BigNumber>;

  registeredWallets(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  whenWalletWasRegisted(
    wallet: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    isWalletRegistered(
      wallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    myWalletWasStolen(overrides?: CallOverrides): Promise<void>;

    publicGoodsRegistrationFee(overrides?: CallOverrides): Promise<BigNumber>;

    registeredWalletCount(overrides?: CallOverrides): Promise<BigNumber>;

    registeredWallets(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    whenWalletWasRegisted(
      wallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "RegisteredAddressEvent(address,bool)"(
      registeredWallet?: null,
      gasless?: null
    ): RegisteredAddressEventEventFilter;
    RegisteredAddressEvent(
      registeredWallet?: null,
      gasless?: null
    ): RegisteredAddressEventEventFilter;
  };

  estimateGas: {
    isWalletRegistered(
      wallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    myWalletWasStolen(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    publicGoodsRegistrationFee(overrides?: CallOverrides): Promise<BigNumber>;

    registeredWalletCount(overrides?: CallOverrides): Promise<BigNumber>;

    registeredWallets(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    whenWalletWasRegisted(
      wallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    isWalletRegistered(
      wallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    myWalletWasStolen(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    publicGoodsRegistrationFee(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registeredWalletCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registeredWallets(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    whenWalletWasRegisted(
      wallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
