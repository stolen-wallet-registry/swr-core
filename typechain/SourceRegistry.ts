/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface SourceRegistryInterface extends utils.Interface {
  functions: {
    "callback(bytes32,bool,bytes)": FunctionFragment;
    "connext()": FunctionFragment;
    "myWalletWasStolen(address,uint256,bool)": FunctionFragment;
    "publicGoodsRegistrationFee()": FunctionFragment;
    "registeredWallets(address)": FunctionFragment;
    "trustedForwarders(address)": FunctionFragment;
    "walletRegisterationAttempt(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "callback"
      | "connext"
      | "myWalletWasStolen"
      | "publicGoodsRegistrationFee"
      | "registeredWallets"
      | "trustedForwarders"
      | "walletRegisterationAttempt"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "callback",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(functionFragment: "connext", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "myWalletWasStolen",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "publicGoodsRegistrationFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registeredWallets",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "trustedForwarders",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "walletRegisterationAttempt",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "callback", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "connext", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "myWalletWasStolen",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "publicGoodsRegistrationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registeredWallets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "trustedForwarders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "walletRegisterationAttempt",
    data: BytesLike
  ): Result;

  events: {
    "CallbackCalled(bytes32,bool,address)": EventFragment;
    "UpdateInitiated(address,uint256,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CallbackCalled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateInitiated"): EventFragment;
}

export interface CallbackCalledEventObject {
  transferId: string;
  success: boolean;
  wallet: string;
}
export type CallbackCalledEvent = TypedEvent<
  [string, boolean, string],
  CallbackCalledEventObject
>;

export type CallbackCalledEventFilter = TypedEventFilter<CallbackCalledEvent>;

export interface UpdateInitiatedEventObject {
  to: string;
  newValue: BigNumber;
  permissioned: boolean;
}
export type UpdateInitiatedEvent = TypedEvent<
  [string, BigNumber, boolean],
  UpdateInitiatedEventObject
>;

export type UpdateInitiatedEventFilter = TypedEventFilter<UpdateInitiatedEvent>;

export interface SourceRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SourceRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    callback(
      transferId: PromiseOrValue<BytesLike>,
      success: PromiseOrValue<boolean>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    connext(overrides?: CallOverrides): Promise<[string]>;

    myWalletWasStolen(
      asset: PromiseOrValue<string>,
      newValue: PromiseOrValue<BigNumberish>,
      permissioned: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    publicGoodsRegistrationFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    registeredWallets(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    trustedForwarders(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    walletRegisterationAttempt(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  callback(
    transferId: PromiseOrValue<BytesLike>,
    success: PromiseOrValue<boolean>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  connext(overrides?: CallOverrides): Promise<string>;

  myWalletWasStolen(
    asset: PromiseOrValue<string>,
    newValue: PromiseOrValue<BigNumberish>,
    permissioned: PromiseOrValue<boolean>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  publicGoodsRegistrationFee(overrides?: CallOverrides): Promise<BigNumber>;

  registeredWallets(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  trustedForwarders(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  walletRegisterationAttempt(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    callback(
      transferId: PromiseOrValue<BytesLike>,
      success: PromiseOrValue<boolean>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    connext(overrides?: CallOverrides): Promise<string>;

    myWalletWasStolen(
      asset: PromiseOrValue<string>,
      newValue: PromiseOrValue<BigNumberish>,
      permissioned: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    publicGoodsRegistrationFee(overrides?: CallOverrides): Promise<BigNumber>;

    registeredWallets(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    trustedForwarders(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    walletRegisterationAttempt(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "CallbackCalled(bytes32,bool,address)"(
      transferId?: null,
      success?: null,
      wallet?: null
    ): CallbackCalledEventFilter;
    CallbackCalled(
      transferId?: null,
      success?: null,
      wallet?: null
    ): CallbackCalledEventFilter;

    "UpdateInitiated(address,uint256,bool)"(
      to?: null,
      newValue?: null,
      permissioned?: null
    ): UpdateInitiatedEventFilter;
    UpdateInitiated(
      to?: null,
      newValue?: null,
      permissioned?: null
    ): UpdateInitiatedEventFilter;
  };

  estimateGas: {
    callback(
      transferId: PromiseOrValue<BytesLike>,
      success: PromiseOrValue<boolean>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    connext(overrides?: CallOverrides): Promise<BigNumber>;

    myWalletWasStolen(
      asset: PromiseOrValue<string>,
      newValue: PromiseOrValue<BigNumberish>,
      permissioned: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    publicGoodsRegistrationFee(overrides?: CallOverrides): Promise<BigNumber>;

    registeredWallets(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    trustedForwarders(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    walletRegisterationAttempt(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    callback(
      transferId: PromiseOrValue<BytesLike>,
      success: PromiseOrValue<boolean>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    connext(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    myWalletWasStolen(
      asset: PromiseOrValue<string>,
      newValue: PromiseOrValue<BigNumberish>,
      permissioned: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    publicGoodsRegistrationFee(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registeredWallets(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    trustedForwarders(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    walletRegisterationAttempt(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
