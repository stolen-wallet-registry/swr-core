/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface AcknowledgementSignatureInterface extends utils.Interface {
  functions: {
    "acknowledgementOfRegistry(address,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "generateHashStruct(address)": FunctionFragment;
    "getDeadline()": FunctionFragment;
    "getDeadline(address)": FunctionFragment;
    "getStartTime(address)": FunctionFragment;
    "getStartTime()": FunctionFragment;
    "getTrustedForwarder(address)": FunctionFragment;
    "getTrustedForwarder()": FunctionFragment;
    "nonces(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "acknowledgementOfRegistry"
      | "generateHashStruct"
      | "getDeadline()"
      | "getDeadline(address)"
      | "getStartTime(address)"
      | "getStartTime()"
      | "getTrustedForwarder(address)"
      | "getTrustedForwarder()"
      | "nonces"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "acknowledgementOfRegistry",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "generateHashStruct",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDeadline()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDeadline(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getStartTime(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getStartTime()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTrustedForwarder(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTrustedForwarder()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nonces",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "acknowledgementOfRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "generateHashStruct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDeadline()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDeadline(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStartTime(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStartTime()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTrustedForwarder(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTrustedForwarder()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;

  events: {
    "AcknowledgementEvent(address,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AcknowledgementEvent"): EventFragment;
}

export interface AcknowledgementEventEventObject {
  owner: string;
  isSponsored: boolean;
}
export type AcknowledgementEventEvent = TypedEvent<
  [string, boolean],
  AcknowledgementEventEventObject
>;

export type AcknowledgementEventEventFilter =
  TypedEventFilter<AcknowledgementEventEvent>;

export interface AcknowledgementSignature extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AcknowledgementSignatureInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acknowledgementOfRegistry(
      owner: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    generateHashStruct(
      forwarder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { hashStruct: string; deadline: BigNumber }
    >;

    "getDeadline()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getDeadline(address)"(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getStartTime(address)"(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getStartTime()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getTrustedForwarder(address)"(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getTrustedForwarder()"(overrides?: CallOverrides): Promise<[string]>;

    nonces(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  acknowledgementOfRegistry(
    owner: PromiseOrValue<string>,
    deadline: PromiseOrValue<BigNumberish>,
    v: PromiseOrValue<BigNumberish>,
    r: PromiseOrValue<BytesLike>,
    s: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  generateHashStruct(
    forwarder: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { hashStruct: string; deadline: BigNumber }>;

  "getDeadline()"(overrides?: CallOverrides): Promise<BigNumber>;

  "getDeadline(address)"(
    owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getStartTime(address)"(
    owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getStartTime()"(overrides?: CallOverrides): Promise<BigNumber>;

  "getTrustedForwarder(address)"(
    owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  "getTrustedForwarder()"(overrides?: CallOverrides): Promise<string>;

  nonces(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    acknowledgementOfRegistry(
      owner: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    generateHashStruct(
      forwarder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { hashStruct: string; deadline: BigNumber }
    >;

    "getDeadline()"(overrides?: CallOverrides): Promise<BigNumber>;

    "getDeadline(address)"(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getStartTime(address)"(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getStartTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    "getTrustedForwarder(address)"(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    "getTrustedForwarder()"(overrides?: CallOverrides): Promise<string>;

    nonces(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "AcknowledgementEvent(address,bool)"(
      owner?: PromiseOrValue<string> | null,
      isSponsored?: PromiseOrValue<boolean> | null
    ): AcknowledgementEventEventFilter;
    AcknowledgementEvent(
      owner?: PromiseOrValue<string> | null,
      isSponsored?: PromiseOrValue<boolean> | null
    ): AcknowledgementEventEventFilter;
  };

  estimateGas: {
    acknowledgementOfRegistry(
      owner: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    generateHashStruct(
      forwarder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getDeadline()"(overrides?: CallOverrides): Promise<BigNumber>;

    "getDeadline(address)"(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getStartTime(address)"(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getStartTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    "getTrustedForwarder(address)"(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTrustedForwarder()"(overrides?: CallOverrides): Promise<BigNumber>;

    nonces(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acknowledgementOfRegistry(
      owner: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    generateHashStruct(
      forwarder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getDeadline()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getDeadline(address)"(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getStartTime(address)"(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getStartTime()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getTrustedForwarder(address)"(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTrustedForwarder()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nonces(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
